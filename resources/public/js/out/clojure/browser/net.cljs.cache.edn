;; Analyzed by ClojureScript 0.0-3058
{:name clojure.browser.net, :doc "Network communication library, wrapping goog.net.\nIncludes a common API over XhrIo, CrossPageChannel, and Websockets.", :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires {Uri goog.Uri, WebSocket goog.net.WebSocket, EventType goog.net.EventType, goog.json goog.json, CfgFields goog.net.xpc.CfgFields, gjson goog.json, XhrIo goog.net.XhrIo, event clojure.browser.event, CrossPageChannel goog.net.xpc.CrossPageChannel, clojure.browser.event clojure.browser.event}, :imports {XhrIo goog.net.XhrIo, EventType goog.net.EventType, WebSocket goog.net.WebSocket, CfgFields goog.net.xpc.CfgFields, CrossPageChannel goog.net.xpc.CrossPageChannel, Uri goog.Uri}, :defs {xpc-config-fields {:name clojure.browser.net/xpc-config-fields, :file "resources/public/js/out/clojure/browser/net.cljs", :line 73, :column 1, :end-line 73, :end-column 23, :test true, :meta {:file "/home/vagrant/graphagora/resources/public/js/out/clojure/browser/net.cljs", :line 73, :column 6, :end-line 73, :end-column 23}}, xhr-connection {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/resources/public/js/out/clojure/browser/net.cljs", :line 81, :column 7, :end-line 81, :end-column 21, :arglists (quote ([])), :doc "Returns an XhrIo connection"}, :name clojure.browser.net/xhr-connection, :variadic false, :file "resources/public/js/out/clojure/browser/net.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 0, :variadic false, :tag goog/net.XhrIo}), :line 81, :end-line 81, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns an XhrIo connection", :test true}, xpc-connection {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/resources/public/js/out/clojure/browser/net.cljs", :line 116, :column 7, :end-line 116, :end-column 21, :arglists (quote ([] [config])), :doc "When passed with a config hash-map, returns a parent\n  CrossPageChannel object. Keys in the config hash map are downcased\n  versions of the goog.net.xpc.CfgFields enum keys,\n  e.g. goog.net.xpc.CfgFields.PEER_URI becomes :peer_uri in the config\n  hash.\n\n  When passed with no args, creates a child CrossPageChannel object,\n  and the config is automatically taken from the URL param 'xpc', as\n  per the CrossPageChannel API."}, :name clojure.browser.net/xpc-connection, :variadic false, :file "resources/public/js/out/clojure/browser/net.cljs", :end-column 21, :method-params ([] [config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 0, :variadic false, :tag #{goog/net.xpc.CrossPageChannel clj-nil}} {:max-fixed-arity 1, :variadic false, :tag goog/net.xpc.CrossPageChannel}), :line 116, :end-line 116, :max-fixed-arity 1, :fn-var true, :arglists (quote ([] [config])), :doc "When passed with a config hash-map, returns a parent\n  CrossPageChannel object. Keys in the config hash map are downcased\n  versions of the goog.net.xpc.CfgFields enum keys,\n  e.g. goog.net.xpc.CfgFields.PEER_URI becomes :peer_uri in the config\n  hash.\n\n  When passed with no args, creates a child CrossPageChannel object,\n  and the config is automatically taken from the URL param 'xpc', as\n  per the CrossPageChannel API.", :test true}, ICrossPageChannel {:meta {:file "/home/vagrant/graphagora/resources/public/js/out/clojure/browser/net.cljs", :line 86, :column 14, :end-line 86, :end-column 31, :protocol-symbol true, :protocol-info {:methods {register-service [[this service-name fn] [this service-name fn encode-json?]]}}}, :protocol-symbol true, :name clojure.browser.net/ICrossPageChannel, :file "resources/public/js/out/clojure/browser/net.cljs", :end-column 31, :column 1, :line 86, :protocol-info {:methods {register-service [[this service-name fn] [this service-name fn encode-json?]]}}, :info nil, :end-line 86, :impls #{goog/net.xpc.CrossPageChannel}, :test true}, IWebSocket {:meta {:file "/home/vagrant/graphagora/resources/public/js/out/clojure/browser/net.cljs", :line 143, :column 14, :end-line 143, :end-column 24, :protocol-symbol true, :protocol-info {:methods {open? [[this]]}}}, :protocol-symbol true, :name clojure.browser.net/IWebSocket, :file "resources/public/js/out/clojure/browser/net.cljs", :end-column 24, :column 1, :line 143, :protocol-info {:methods {open? [[this]]}}, :info nil, :end-line 143, :impls #{goog/net.WebSocket}, :test true}, *timeout* {:name clojure.browser.net/*timeout*, :file "resources/public/js/out/clojure/browser/net.cljs", :line 19, :column 1, :end-line 19, :end-column 15, :test true, :meta {:file "/home/vagrant/graphagora/resources/public/js/out/clojure/browser/net.cljs", :line 19, :column 6, :end-line 19, :end-column 15}}, connect {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/resources/public/js/out/clojure/browser/net.cljs", :line 31, :column 4, :end-line 31, :end-column 11, :protocol clojure.browser.net/IConnection, :arglists (quote ([this] [this opt1] [this opt1 opt2] [this opt1 opt2 opt3]))}, :protocol clojure.browser.net/IConnection, :name clojure.browser.net/connect, :variadic false, :file "resources/public/js/out/clojure/browser/net.cljs", :end-column 11, :method-params ([this] [this opt1] [this opt1 opt2] [this opt1 opt2 opt3]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any} {:max-fixed-arity 2, :variadic false, :tag any} {:max-fixed-arity 3, :variadic false, :tag any} {:max-fixed-arity 4, :variadic false, :tag any}), :line 30, :end-line 31, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this] [this opt1] [this opt1 opt2] [this opt1 opt2 opt3])), :test true}, event-types {:name clojure.browser.net/event-types, :file "resources/public/js/out/clojure/browser/net.cljs", :line 21, :column 1, :end-line 21, :end-column 17, :test true, :meta {:file "/home/vagrant/graphagora/resources/public/js/out/clojure/browser/net.cljs", :line 21, :column 6, :end-line 21, :end-column 17}}, websocket-connection {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/resources/public/js/out/clojure/browser/net.cljs", :line 174, :column 7, :end-line 174, :end-column 27, :arglists (quote ([] [auto-reconnect?] [auto-reconnect? next-reconnect-fn]))}, :name clojure.browser.net/websocket-connection, :variadic false, :file "resources/public/js/out/clojure/browser/net.cljs", :end-column 27, :method-params ([] [auto-reconnect?] [auto-reconnect? next-reconnect-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 0, :variadic false, :tag goog/net.WebSocket} {:max-fixed-arity 1, :variadic false, :tag goog/net.WebSocket} {:max-fixed-arity 2, :variadic false, :tag goog/net.WebSocket}), :line 174, :end-line 174, :max-fixed-arity 2, :fn-var true, :arglists (quote ([] [auto-reconnect?] [auto-reconnect? next-reconnect-fn])), :test true}, close {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/resources/public/js/out/clojure/browser/net.cljs", :line 42, :column 4, :end-line 42, :end-column 9, :protocol clojure.browser.net/IConnection, :arglists (quote ([this]))}, :protocol clojure.browser.net/IConnection, :name clojure.browser.net/close, :variadic false, :file "resources/public/js/out/clojure/browser/net.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any}), :line 30, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, register-service {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/resources/public/js/out/clojure/browser/net.cljs", :line 87, :column 4, :end-line 87, :end-column 20, :protocol clojure.browser.net/ICrossPageChannel, :arglists (quote ([this service-name fn] [this service-name fn encode-json?]))}, :protocol clojure.browser.net/ICrossPageChannel, :name clojure.browser.net/register-service, :variadic false, :file "resources/public/js/out/clojure/browser/net.cljs", :end-column 20, :method-params ([this service-name fn] [this service-name fn encode-json?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 3, :variadic false, :tag any} {:max-fixed-arity 4, :variadic false, :tag any}), :line 86, :end-line 87, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this service-name fn] [this service-name fn encode-json?])), :test true}, IConnection {:meta {:file "/home/vagrant/graphagora/resources/public/js/out/clojure/browser/net.cljs", :line 30, :column 14, :end-line 30, :end-column 25, :protocol-symbol true, :protocol-info {:methods {connect [[this] [this opt1] [this opt1 opt2] [this opt1 opt2 opt3]], transmit [[this opt] [this opt opt2] [this opt opt2 opt3] [this opt opt2 opt3 opt4] [this opt opt2 opt3 opt4 opt5]], close [[this]]}}}, :protocol-symbol true, :name clojure.browser.net/IConnection, :file "resources/public/js/out/clojure/browser/net.cljs", :end-column 25, :column 1, :line 30, :protocol-info {:methods {connect [[this] [this opt1] [this opt1 opt2] [this opt1 opt2 opt3]], transmit [[this opt] [this opt opt2] [this opt opt2 opt3] [this opt opt2 opt3 opt4] [this opt opt2 opt3 opt4 opt5]], close [[this]]}}, :info nil, :end-line 30, :impls #{goog/net.xpc.CrossPageChannel goog/net.WebSocket goog/net.XhrIo}, :test true}, open? {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/resources/public/js/out/clojure/browser/net.cljs", :line 144, :column 4, :end-line 144, :end-column 9, :protocol clojure.browser.net/IWebSocket, :arglists (quote ([this]))}, :protocol clojure.browser.net/IWebSocket, :name clojure.browser.net/open?, :variadic false, :file "resources/public/js/out/clojure/browser/net.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any}), :line 143, :end-line 144, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, transmit {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/resources/public/js/out/clojure/browser/net.cljs", :line 36, :column 4, :end-line 36, :end-column 12, :protocol clojure.browser.net/IConnection, :arglists (quote ([this opt] [this opt opt2] [this opt opt2 opt3] [this opt opt2 opt3 opt4] [this opt opt2 opt3 opt4 opt5]))}, :protocol clojure.browser.net/IConnection, :name clojure.browser.net/transmit, :variadic false, :file "resources/public/js/out/clojure/browser/net.cljs", :end-column 12, :method-params ([this opt] [this opt opt2] [this opt opt2 opt3] [this opt opt2 opt3 opt4] [this opt opt2 opt3 opt4 opt5]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic false, :tag any} {:max-fixed-arity 3, :variadic false, :tag any} {:max-fixed-arity 4, :variadic false, :tag any} {:max-fixed-arity 5, :variadic false, :tag any} {:max-fixed-arity 6, :variadic false, :tag any}), :line 30, :end-line 36, :max-fixed-arity 6, :fn-var true, :arglists (quote ([this opt] [this opt opt2] [this opt opt2 opt3] [this opt opt2 opt3 opt4] [this opt opt2 opt3 opt4 opt5])), :test true}}}