;; Analyzed by ClojureScript 1.7.145
{:use-macros nil, :excludes #{}, :name demo.life, :imports nil, :requires {draw demo.life-draw, demo.life-draw demo.life-draw, logic demo.life-logic, demo.life-logic demo.life-logic, r reagent.core, reagent.core reagent.core}, :uses nil, :defs {life-component {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/life.cljs", :line 30, :column 7, :end-line 30, :end-column 21, :arglists (quote ([]))}, :name demo.life/life-component, :variadic false, :file "src/cljs/demo/life.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, main {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/life.cljs", :line 51, :column 7, :end-line 51, :end-column 11, :arglists (quote ([]))}, :name demo.life/main, :variadic false, :file "src/cljs/demo/life.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, alert-component {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/life.cljs", :line 35, :column 7, :end-line 35, :end-column 22, :arglists (quote ([]))}, :name demo.life/alert-component, :variadic false, :file "src/cljs/demo/life.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, time-updater {:name demo.life/time-updater, :file "src/cljs/demo/life.cljs", :line 43, :column 1, :end-line 43, :end-column 22, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/life.cljs", :line 43, :column 10, :end-line 43, :end-column 22}}, timer {:name demo.life/timer, :file "src/cljs/demo/life.cljs", :line 41, :column 1, :end-line 41, :end-column 15, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/life.cljs", :line 41, :column 10, :end-line 41, :end-column 15}}, play-life {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/life.cljs", :line 19, :column 7, :end-line 19, :end-column 16, :arglists (quote ([circle-data n timeout nx ny neighbours]))}, :name demo.life/play-life, :variadic false, :file "src/cljs/demo/life.cljs", :end-column 16, :method-params ([circle-data n timeout nx ny neighbours]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 6, :fn-var true, :arglists (quote ([circle-data n timeout nx ny neighbours]))}, circle-data {:name demo.life/circle-data, :file "src/cljs/demo/life.cljs", :line 6, :column 1, :end-line 6, :end-column 17, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/life.cljs", :line 6, :column 6, :end-line 6, :end-column 17}}, hello {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/life.cljs", :line 47, :column 7, :end-line 47, :end-column 12, :arglists (quote ([]))}, :name demo.life/hello, :variadic false, :file "src/cljs/demo/life.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, circle-state {:name demo.life/circle-state, :file "src/cljs/demo/life.cljs", :line 17, :column 1, :end-line 17, :end-column 18, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/life.cljs", :line 17, :column 6, :end-line 17, :end-column 18}}, app-state {:name demo.life/app-state, :file "src/cljs/demo/life.cljs", :line 38, :column 1, :end-line 38, :end-column 19, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/life.cljs", :line 38, :column 10, :end-line 38, :end-column 19}}, refresh-stuff {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/life.cljs", :line 8, :column 7, :end-line 8, :end-column 20, :arglists (quote ([]))}, :name demo.life/refresh-stuff, :variadic false, :file "src/cljs/demo/life.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:div :text}, :order [:text :div]}, :doc nil}