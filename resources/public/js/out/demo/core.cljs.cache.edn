;; Analyzed by ClojureScript 1.7.145
{:use-macros nil, :excludes #{}, :name demo.core, :imports nil, :requires {logic demo.life-logic, draw demo.life-draw, dom om.dom, reagent.core reagent.core, r reagent.core, demo.life-logic demo.life-logic, demo.life-draw demo.life-draw, om.dom om.dom, cljs.core.async cljs.core.async, om.core om.core, om om.core}, :uses {timeout cljs.core.async, pub cljs.core.async, <! cljs.core.async, chan cljs.core.async, sub cljs.core.async, sliding-buffer cljs.core.async, put! cljs.core.async}, :defs {life-component {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 56, :column 7, :end-line 56, :end-column 21, :arglists (quote ([]))}, :name demo.core/life-component, :variadic false, :file "src/cljs/demo/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, ny {:name demo.core/ny, :file "src/cljs/demo/core.cljs", :line 14, :column 1, :end-line 14, :end-column 8, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 14, :column 6, :end-line 14, :end-column 8}}, timeperiod {:name demo.core/timeperiod, :file "src/cljs/demo/core.cljs", :line 29, :column 1, :end-line 29, :end-column 16, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 29, :column 6, :end-line 29, :end-column 16}}, home-component {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 74, :column 7, :end-line 74, :end-column 21, :arglists (quote ([]))}, :name demo.core/home-component, :variadic false, :file "src/cljs/demo/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, main {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 83, :column 7, :end-line 83, :end-column 11, :arglists (quote ([]))}, :name demo.core/main, :variadic false, :file "src/cljs/demo/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, get-circle-state {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 22, :column 7, :end-line 22, :end-column 23, :arglists (quote ([]))}, :name demo.core/get-circle-state, :variadic false, :file "src/cljs/demo/core.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, set-time-updater {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 33, :column 7, :end-line 33, :end-column 23, :arglists (quote ([speed]))}, :name demo.core/set-time-updater, :variadic false, :file "src/cljs/demo/core.cljs", :end-column 23, :method-params ([speed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([speed]))}, r {:name demo.core/r, :file "src/cljs/demo/core.cljs", :line 15, :column 1, :end-line 15, :end-column 7, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 15, :column 6, :end-line 15, :end-column 7}}, stop-button {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 68, :column 7, :end-line 68, :end-column 18, :arglists (quote ([]))}, :name demo.core/stop-button, :variadic false, :file "src/cljs/demo/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, wrap {:name demo.core/wrap, :file "src/cljs/demo/core.cljs", :line 16, :column 1, :end-line 16, :end-column 10, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 16, :column 6, :end-line 16, :end-column 10}}, timer {:name demo.core/timer, :file "src/cljs/demo/core.cljs", :line 30, :column 1, :end-line 30, :end-column 15, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 30, :column 10, :end-line 30, :end-column 15}}, size-map {:name demo.core/size-map, :file "src/cljs/demo/core.cljs", :line 18, :column 1, :end-line 18, :end-column 14, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 18, :column 6, :end-line 18, :end-column 14}}, timer-state {:name demo.core/timer-state, :file "src/cljs/demo/core.cljs", :line 28, :column 1, :end-line 28, :end-column 17, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 28, :column 6, :end-line 28, :end-column 17}}, hello {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 62, :column 7, :end-line 62, :end-column 12, :arglists (quote ([]))}, :name demo.core/hello, :variadic false, :file "src/cljs/demo/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, color-map {:name demo.core/color-map, :file "src/cljs/demo/core.cljs", :line 17, :column 1, :end-line 17, :end-column 15, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 17, :column 6, :end-line 17, :end-column 15}}, start-button {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 71, :column 7, :end-line 71, :end-column 19, :arglists (quote ([]))}, :name demo.core/start-button, :variadic false, :file "src/cljs/demo/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, state {:name demo.core/state, :file "src/cljs/demo/core.cljs", :line 31, :column 1, :end-line 31, :end-column 15, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 31, :column 10, :end-line 31, :end-column 15}}, reset-button {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 65, :column 7, :end-line 65, :end-column 19, :arglists (quote ([]))}, :name demo.core/reset-button, :variadic false, :file "src/cljs/demo/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, rand-circle-data {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 19, :column 7, :end-line 19, :end-column 23, :arglists (quote ([]))}, :name demo.core/rand-circle-data, :variadic false, :file "src/cljs/demo/core.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, circle-state {:name demo.core/circle-state, :file "src/cljs/demo/core.cljs", :line 27, :column 1, :end-line 27, :end-column 18, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 27, :column 6, :end-line 27, :end-column 18}}, nx {:name demo.core/nx, :file "src/cljs/demo/core.cljs", :line 13, :column 1, :end-line 13, :end-column 8, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 13, :column 6, :end-line 13, :end-column 8}}, clear-time-updater {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 50, :column 7, :end-line 50, :end-column 25, :arglists (quote ([]))}, :name demo.core/clear-time-updater, :variadic false, :file "src/cljs/demo/core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, reset-state {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/core.cljs", :line 53, :column 7, :end-line 53, :end-column 18, :arglists (quote ([]))}, :name demo.core/reset-state, :variadic false, :file "src/cljs/demo/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {om om.core, om.core om.core, dom om.dom, om.dom om.dom}, :cljs.analyzer/constants {:seen #{:true :wrap :color :dead :button :float :width :circles :div#life :component-did-update :style :div :reagent-render :svg :component-will-mount :live :onClick :height}, :order [:true :live :dead :wrap :circles :div#life :svg :width :height :button :onClick :reagent-render :component-will-mount :component-did-update :div :style :color :float]}, :doc nil}