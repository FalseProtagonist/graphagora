;; Analyzed by ClojureScript 1.7.145
{:use-macros nil, :excludes #{}, :name demo.notes, :imports nil, :requires nil, :uses nil, :defs {swap-life {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/notes.cljs", :line 3, :column 7, :end-line 3, :end-column 16, :arglists (quote ([circle-state]))}, :name demo.notes/swap-life, :variadic false, :file "src/cljs/demo/notes.cljs", :end-column 16, :method-params ([circle-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 1, :fn-var true, :arglists (quote ([circle-state]))}, draw-circles {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/notes.cljs", :line 7, :column 7, :end-line 7, :end-column 19, :arglists (quote ([info]))}, :name demo.notes/draw-circles, :variadic false, :file "src/cljs/demo/notes.cljs", :end-column 19, :method-params ([info]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([info]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:circles}, :order [:circles]}, :doc nil}