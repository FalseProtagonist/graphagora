;; Analyzed by ClojureScript 1.7.145
{:use-macros nil, :excludes #{}, :name demo.life-logic, :imports nil, :requires {util demo.util, demo.util demo.util}, :uses nil, :defs {states {:name demo.life-logic/states, :file "src/cljs/demo/life_logic.cljs", :line 4, :column 1, :end-line 4, :end-column 12, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/life_logic.cljs", :line 4, :column 6, :end-line 4, :end-column 12}}, alive {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/life_logic.cljs", :line 6, :column 7, :end-line 6, :end-column 12, :arglists (quote ([num-neighbours current-state]))}, :name demo.life-logic/alive, :variadic false, :file "src/cljs/demo/life_logic.cljs", :end-column 12, :method-params ([num-neighbours current-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([num-neighbours current-state]))}, get-circle-coordinates {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/life_logic.cljs", :line 9, :column 7, :end-line 9, :end-column 29, :arglists (quote ([nx ny r colormap]))}, :name demo.life-logic/get-circle-coordinates, :variadic false, :file "src/cljs/demo/life_logic.cljs", :end-column 29, :method-params ([nx ny r colormap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 4, :fn-var true, :arglists (quote ([nx ny r colormap]))}, update-visuals {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/life_logic.cljs", :line 23, :column 7, :end-line 23, :end-column 21, :arglists (quote ([circles color-map size-map]))}, :name demo.life-logic/update-visuals, :variadic false, :file "src/cljs/demo/life_logic.cljs", :end-column 21, :method-params ([circles color-map size-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 3, :fn-var true, :arglists (quote ([circles color-map size-map]))}, update-visuals-main {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/life_logic.cljs", :line 32, :column 7, :end-line 32, :end-column 26, :arglists (quote ([circle-data color-map size-map]))}, :name demo.life-logic/update-visuals-main, :variadic false, :file "src/cljs/demo/life_logic.cljs", :end-column 26, :method-params ([circle-data color-map size-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 3, :fn-var true, :arglists (quote ([circle-data color-map size-map]))}, neighbours {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/life_logic.cljs", :line 35, :column 7, :end-line 35, :end-column 17, :arglists (quote ([nx ny pos & {:keys [wrap]}])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(nx ny pos {:keys [wrap]})], :arglists ([nx ny pos & {:keys [wrap]}]), :arglists-meta (nil)}}, :name demo.life-logic/neighbours, :variadic true, :file "src/cljs/demo/life_logic.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(nx ny pos {:keys [wrap]})], :arglists ([nx ny pos & {:keys [wrap]}]), :arglists-meta (nil)}, :method-params [(nx ny pos {:keys [wrap]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 3, :fn-var true, :arglists ([nx ny pos & {:keys [wrap]}])}, init-neighbours {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/life_logic.cljs", :line 49, :column 7, :end-line 49, :end-column 22, :arglists (quote ([nx ny & {:keys [wrap]}])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(nx ny {:keys [wrap]})], :arglists ([nx ny & {:keys [wrap]}]), :arglists-meta (nil)}}, :name demo.life-logic/init-neighbours, :variadic true, :file "src/cljs/demo/life_logic.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(nx ny {:keys [wrap]})], :arglists ([nx ny & {:keys [wrap]}]), :arglists-meta (nil)}, :method-params [(nx ny {:keys [wrap]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists ([nx ny & {:keys [wrap]}])}, count-live-neighbours {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/life_logic.cljs", :line 52, :column 7, :end-line 52, :end-column 28, :arglists (quote ([circles neighbours pos]))}, :name demo.life-logic/count-live-neighbours, :variadic false, :file "src/cljs/demo/life_logic.cljs", :end-column 28, :method-params ([circles neighbours pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 3, :fn-var true, :arglists (quote ([circles neighbours pos]))}, iterate-life-main {:protocol-inline nil, :meta {:file "/home/vagrant/graphagora/src/cljs/demo/life_logic.cljs", :line 59, :column 7, :end-line 59, :end-column 24, :arglists (quote ([data nx ny & {:keys [wrap]}])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(data nx ny {:keys [wrap]})], :arglists ([data nx ny & {:keys [wrap]}]), :arglists-meta (nil)}}, :name demo.life-logic/iterate-life-main, :variadic true, :file "src/cljs/demo/life_logic.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(data nx ny {:keys [wrap]})], :arglists ([data nx ny & {:keys [wrap]}]), :arglists-meta (nil)}, :method-params [(data nx ny {:keys [wrap]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 3, :fn-var true, :arglists ([data nx ny & {:keys [wrap]}])}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :r :wrap :color :dead :alive :width :circles :x :live :height}, :order [:dead :live :x :y :r :alive :color :circles :width :height :wrap]}, :doc nil}